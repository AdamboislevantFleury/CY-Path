package cypath;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class QuoridorFX extends Application {

    private QuoridorBoard quoridorBoard;

    @Override
    public void start(Stage primaryStage) {
        // Create a GridPane for the game board
        GridPane gridPane = createGameBoard();

        // Create buttons for the menu
        Button saveButton = new Button("Sauvegarder");
        Button loadButton = new Button("Charger");
        Button nouvellePartieButton = new Button("Nouvelle Partie");
        Button placeWallButton = new Button("Mettre un mur");
        Button moveButton = new Button("Se déplacer");
        // Create an HBox for the menu buttons
        HBox menuBox = new HBox(10); // Set spacing between buttons
        menuBox.getChildren().addAll(saveButton, loadButton, nouvellePartieButton, placeWallButton, moveButton);

        // Create a BorderPane for the layout
        BorderPane layout = new BorderPane();
        layout.setCenter(gridPane); // Add the game board to the layout
        layout.setBottom(menuBox); // Add the menu buttons to the bottom

        // Create a Scene with the layout
        Scene scene = new Scene(layout, 600, 600);

        // Set the Scene to the Stage and show the Stage
        primaryStage.setScene(scene);
        primaryStage.show();

        // Event handling for "Jouer" button
        nouvellePartieButton.setOnAction(e -> {
            int numberOfPlayers = showNumberOfPlayersSelection(primaryStage);
            if (numberOfPlayers != -1) {
              //  quoridorBoard = new QuoridorBoard(numberOfPlayers);
                // Start the game logic here
            }
        });

        // Event handling for "Mettre un mur" button
        placeWallButton.setOnAction(e -> {
            if (quoridorBoard != null) {
              //  quoridorBoard.placeWall();
            }
        });

        // Event handling for "Se déplacer" button
        moveButton.setOnAction(e -> {
            if (quoridorBoard != null) {
              //  quoridorBoard.move();
            }
        });
    }

    private GridPane createGameBoard() {
        GridPane gridPane = new GridPane();
        gridPane.setPadding(new Insets(10));
        gridPane.setHgap(5); // Set horizontal gap between nodes
        gridPane.setVgap(5); // Set vertical gap between nodes

        // Add nodes representing intersections as buttons
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                Node node = new Node(i, j);

                // Create a button for the node
                Button button = new Button();
                button.setPrefSize(50, 50); // Set button size

                // Set the column and row indexes for the node
                GridPane.setColumnIndex(button, node.getX());
                GridPane.setRowIndex(button, node.getY());

                // Add the button to the GridPane
                gridPane.getChildren().add(button);

            /*    // Set button color based on node's isTaken property
                if (node.isTaken()) {
                    // Set a different color for each pawn
                    if (node.getCurrentPosition().equals(startPositionP1)) {
                        button.setStyle("-fx-background-color: red;");
                    } else if (node.getCurrentPosition().equals(startPositionP2)) {
                        button.setStyle("-fx-background-color: blue;");
                    } else if (node.getCurrentPosition().equals(startPositionP3)) {
                        button.setStyle("-fx-background-color: green;");
                    } else if (node.getCurrentPosition().equals(startPositionP4)) {
                        button.setStyle("-fx-background-color: yellow;");
                    }
                } else {*/
                    button.setStyle("-fx-background-color: black;");
               // }
            }
        }

        return gridPane;
    }

    private int showNumberOfPlayersSelection(Stage primaryStage) {
        // Create a new Stage for selecting the number of players
        Stage selectionStage = new Stage();
        selectionStage.initOwner(primaryStage);
        selectionStage.setTitle("Sélection du nombre de joueurs");

        // Create buttons for the number of players options
        Button twoPlayersButton = new Button("2 joueurs");
        Button fourPlayersButton = new Button("4 joueurs");

        // Create a VBox for the buttons
        VBox optionsBox = new VBox(10); // Set spacing between buttons
        optionsBox.getChildren().addAll(twoPlayersButton, fourPlayersButton);
        optionsBox.setStyle("-fx-padding: 10px;"); // Add padding to the VBox

        // Create a Scene for the selection stage
        Scene scene = new Scene(optionsBox);

        // Set the Scene to the selection stage and show the stage
        selectionStage.setScene(scene);
        selectionStage.show();

        // Event handling for number of players options
        twoPlayersButton.setOnAction(e -> {
            selectionStage.close();
            // Return the selected number of players
            // You can modify this method to return the selected value instead of printing it
            System.out.println("Nombre de joueurs selectionne : 2");
        });
        fourPlayersButton.setOnAction(e -> {
            selectionStage.close();
            // Return the selected number of players
            // You can modify this method to return the selected value instead of printing it
            System.out.println("Nombre de joueurs selectionne : 4");
        });

        return -1; // Default return value
    }

    public static void main(String[] args) {
        launch(args);
    }
}
